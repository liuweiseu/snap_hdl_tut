// MODULE top, AUTOMATICALLY GENERATED BY PYTHON

/**/
`default_nettype wire


module top (
  // gpio: led
    output [0:0] gpio_led_0_0_ext,
  // lmx2581: lmx2581_from
    input lmx_muxout,
    output lmx_be,
    output lmx_ce,
    output lmx_clk,
    output lmx_data,
    output lmx_le,
  // microblaze: microblaze0
    input UART_rxd,
    inout spi_rtl_io0,
    inout spi_rtl_io1,
    inout spi_rtl_io2,
    inout spi_rtl_io3,
    inout spi_rtl_ss,
    output UART_txd,
  // snap: SNAP
    input sys_clk_n,
    input sys_clk_p,
  // snap_adc: snap_adc
    input [0:0] adc16_clk_line_n,
    input [0:0] adc16_clk_line_p,
    input [11:0] adc16_ser_a_n,
    input [11:0] adc16_ser_a_p,
    input [11:0] adc16_ser_b_n,
    input [11:0] adc16_ser_b_p,
    output adc0_adc3wire_csn1,
    output adc0_adc3wire_csn2,
    output adc0_adc3wire_csn3,
    output [2:0] adc0_adc3wire_sclk,
    output [2:0] adc0_adc3wire_sdata,
    output [2:0] adc_pd,
    output [2:0] adc_rst_n,
    output [0:0] clk_sel_a,
    output [0:0] clk_sel_b,
  // ten_gbe: ten_gbe
    input mgt_rx_n1,
    input mgt_rx_p1,
    input ref_clk_n0,
    input ref_clk_p0,
    output mgt_tx_n1,
    output mgt_tx_p1,
    output tx_disable1
  );



  // usermodule: snap_hdl_pfb_ip
  localparam ADC16_WB_RAM0_WBID0 = 5;
  localparam ADC16_WB_RAM1_WBID0 = 6;
  localparam ADC16_WB_RAM2_WBID0 = 7;
  localparam LMX2581_CONTROLLER_INST_WBID0 = 3;
  localparam N_WB_SLAVES = 23;
  localparam SLAVE_ADDR = {
    32'h00016158, // ten_gbe
    32'h00016138, // sys
    32'h00016134, // adc16_use_synth
    32'h00016130, // sys_ctl
    32'h0001612c, // sw_trig
    32'h00016128, // shiftreg
    32'h00016124, // pwr_snapshot_ss1_status
    32'h00016120, // pwr_snapshot_ss1_ctrl
    32'h0001611c, // pwr_snapshot_ss0_status
    32'h00016118, // pwr_snapshot_ss0_ctrl
    32'h00016114, // pfb_status
    32'h00016110, // led_ctrl
    32'h0001610c, // adc_trig
    32'h00016108, // adc_snap_status
    32'h00016104, // adc_snap_ctrl
    32'h00015104, // adc16_wb_ram2
    32'h00014104, // adc16_wb_ram1
    32'h00013104, // adc16_wb_ram0
    32'h00013004, // adc16_controller
    32'h00013000, // lmx_ctrl
    32'h00012800, // pwr_snapshot_ss1_bram
    32'h00012000, // pwr_snapshot_ss0_bram
    32'h00010000 // adc_snap_bram
    };
  localparam SLAVE_HIGH = {
    32'h00025157, // ten_gbe
    32'h00016157, // sys
    32'h00016137, // adc16_use_synth
    32'h00016133, // sys_ctl
    32'h0001612f, // sw_trig
    32'h0001612b, // shiftreg
    32'h00016127, // pwr_snapshot_ss1_status
    32'h00016123, // pwr_snapshot_ss1_ctrl
    32'h0001611f, // pwr_snapshot_ss0_status
    32'h0001611b, // pwr_snapshot_ss0_ctrl
    32'h00016117, // pfb_status
    32'h00016113, // led_ctrl
    32'h0001610f, // adc_trig
    32'h0001610b, // adc_snap_status
    32'h00016107, // adc_snap_ctrl
    32'h00016103, // adc16_wb_ram2
    32'h00015103, // adc16_wb_ram1
    32'h00014103, // adc16_wb_ram0
    32'h00013103, // adc16_controller
    32'h00013003, // lmx_ctrl
    32'h00012fff, // pwr_snapshot_ss1_bram
    32'h000127ff, // pwr_snapshot_ss0_bram
    32'h00011fff // adc_snap_bram
    };
  localparam SNAP_ADC_ADC16_USE_SYNTH_WBID0 = 20;
  localparam SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0 = 0;
  localparam SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0 = 8;
  localparam SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0 = 9;
  localparam SNAP_HDL_PFB_ADC_TRIG_WBID0 = 10;
  localparam SNAP_HDL_PFB_LED_CTRL_WBID0 = 11;
  localparam SNAP_HDL_PFB_PFB_STATUS_WBID0 = 12;
  localparam SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0 = 1;
  localparam SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0 = 13;
  localparam SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0 = 14;
  localparam SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0 = 2;
  localparam SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0 = 15;
  localparam SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0 = 16;
  localparam SNAP_HDL_PFB_SHIFTREG_WBID0 = 17;
  localparam SNAP_HDL_PFB_SW_TRIG_WBID0 = 18;
  localparam SNAP_HDL_PFB_SYS_CTL_WBID0 = 19;
  localparam SNAP_HDL_PFB_TEN_GBE_WBID0 = 22;
  localparam SYS_BLOCK_INST_WBID0 = 21;
  localparam WB_ADC16_CONTROLLER_WBID0 = 4;

/*
  _____ _                   _     
 / ____(_)                 | |    
| (___  _  __ _ _ __   __ _| |___ 
 \___ \| |/ _` | '_ \ / _` | / __|
 ____) | | (_| | | | | (_| | \__ \ 
|_____/|_|\__, |_| |_|\__,_|_|___/
          __/ |                  
         |___/                   
*/
  // bram: adc_snap/bram
  wire [9:0] snap_hdl_pfb_adc_snap_bram_addr;
  wire [63:0] snap_hdl_pfb_adc_snap_bram_data_in;
  wire [63:0] snap_hdl_pfb_adc_snap_bram_data_out;
  wire snap_hdl_pfb_adc_snap_bram_we;
  // bram: pwr_snapshot/ss0/bram
  wire [7:0] snap_hdl_pfb_pwr_snapshot_ss0_bram_addr;
  wire [63:0] snap_hdl_pfb_pwr_snapshot_ss0_bram_data_in;
  wire [63:0] snap_hdl_pfb_pwr_snapshot_ss0_bram_data_out;
  wire snap_hdl_pfb_pwr_snapshot_ss0_bram_we;
  // bram: pwr_snapshot/ss1/bram
  wire [7:0] snap_hdl_pfb_pwr_snapshot_ss1_bram_addr;
  wire [63:0] snap_hdl_pfb_pwr_snapshot_ss1_bram_data_in;
  wire [63:0] snap_hdl_pfb_pwr_snapshot_ss1_bram_data_out;
  wire snap_hdl_pfb_pwr_snapshot_ss1_bram_we;
  // gpio: led
  wire [0:0] snap_hdl_pfb_led_gateway;
  // microblaze: microblaze0
  wire mb_intr;
  wire [3:0] mb_intr_v;
  wire spi_rtl_io0_i;
  wire spi_rtl_io0_o;
  wire spi_rtl_io0_t;
  wire spi_rtl_io1_i;
  wire spi_rtl_io1_o;
  wire spi_rtl_io1_t;
  wire spi_rtl_io2_i;
  wire spi_rtl_io2_o;
  wire spi_rtl_io2_t;
  wire spi_rtl_io3_i;
  wire spi_rtl_io3_o;
  wire spi_rtl_io3_t;
  wire spi_rtl_ss_i;
  wire spi_rtl_ss_o;
  wire spi_rtl_ss_t;
  wire wb_rst_i;
  wire wbm_ack_i;
  wire [31:0] wbm_adr_o;
  wire wbm_cyc_o;
  wire [31:0] wbm_dat_i;
  wire [31:0] wbm_dat_o;
  wire wbm_rst_o;
  wire [3:0] wbm_sel_o;
  wire wbm_stb_o;
  wire wbm_we_o;
  // snap: SNAP
  wire clk_200;
  wire idelay_rdy;
  wire sys_clk180;
  wire sys_clk270;
  wire sys_clk90;
  wire sys_rst;
  // snap_adc: snap_adc
  wire adc0_clk;
  wire adc0_clk180;
  wire adc0_clk270;
  wire adc0_clk90;
  wire [63:0] adc16_delay_rst;
  wire [4:0] adc16_delay_tap;
  wire [1:0] adc16_demux_mode;
  wire [63:0] adc16_iserdes_bitslip;
  wire [1:0] adc16_locked;
  wire adc16_reset;
  wire [9:0] adc16_snap_addr;
  wire adc16_snap_req;
  wire adc16_snap_we;
  wire [7:0] snap_hdl_pfb_snap_adc_a1;
  wire [7:0] snap_hdl_pfb_snap_adc_a2;
  wire [7:0] snap_hdl_pfb_snap_adc_a3;
  wire [7:0] snap_hdl_pfb_snap_adc_a4;
  wire [7:0] snap_hdl_pfb_snap_adc_b1;
  wire [7:0] snap_hdl_pfb_snap_adc_b2;
  wire [7:0] snap_hdl_pfb_snap_adc_b3;
  wire [7:0] snap_hdl_pfb_snap_adc_b4;
  wire [7:0] snap_hdl_pfb_snap_adc_c1;
  wire [7:0] snap_hdl_pfb_snap_adc_c2;
  wire [7:0] snap_hdl_pfb_snap_adc_c3;
  wire [7:0] snap_hdl_pfb_snap_adc_c4;
  // sw_reg: adc_snap/ctrl
  wire [31:0] snap_hdl_pfb_adc_snap_ctrl_user_data_out;
  // sw_reg: adc_snap/status
  wire [31:0] snap_hdl_pfb_adc_snap_status_user_data_in;
  // sw_reg: adc_trig
  wire [31:0] snap_hdl_pfb_adc_trig_user_data_out;
  // sw_reg: led_ctrl
  wire [31:0] snap_hdl_pfb_led_ctrl_user_data_out;
  // sw_reg: pfb_status
  wire [31:0] snap_hdl_pfb_pfb_status_user_data_in;
  // sw_reg: pwr_snapshot/ss0/ctrl
  wire [31:0] snap_hdl_pfb_pwr_snapshot_ss0_ctrl_user_data_out;
  // sw_reg: pwr_snapshot/ss0/status
  wire [31:0] snap_hdl_pfb_pwr_snapshot_ss0_status_user_data_in;
  // sw_reg: pwr_snapshot/ss1/ctrl
  wire [31:0] snap_hdl_pfb_pwr_snapshot_ss1_ctrl_user_data_out;
  // sw_reg: pwr_snapshot/ss1/status
  wire [31:0] snap_hdl_pfb_pwr_snapshot_ss1_status_user_data_in;
  // sw_reg: shiftreg
  wire [31:0] snap_hdl_pfb_shiftreg_user_data_out;
  // sw_reg: sw_trig
  wire [31:0] snap_hdl_pfb_sw_trig_user_data_out;
  // sw_reg: sys_ctl
  wire [31:0] snap_hdl_pfb_sys_ctl_user_data_out;
  // sw_reg_sync: adc16_use_synth
  wire [31:0] snap_adc_adc16_use_synth_user_data_out;
  // ten_gbe: ten_gbe
  wire areset_clk156_out0;
  wire core_clk_156_0;
  wire dclk0;
  wire gtrxreset_out0;
  wire gttxreset_out0;
  wire [2:0] mgt_rxeqmix1;
  wire [3:0] mgt_txdiffctrl1;
  wire [4:0] mgt_txpostemphasis1;
  wire [3:0] mgt_txpreemphasis1;
  wire qplllock_out0;
  wire qplloutclk_out0;
  wire qplloutrefclk_out0;
  wire reset_counter_done_out0;
  wire resetdone1;
  wire signal_detect1;
  wire snap_hdl_pfb_ten_gbe_led_rx;
  wire snap_hdl_pfb_ten_gbe_led_tx;
  wire snap_hdl_pfb_ten_gbe_led_up;
  wire snap_hdl_pfb_ten_gbe_rst;
  wire snap_hdl_pfb_ten_gbe_rx_ack;
  wire snap_hdl_pfb_ten_gbe_rx_bad_frame;
  wire [63:0] snap_hdl_pfb_ten_gbe_rx_data;
  wire snap_hdl_pfb_ten_gbe_rx_end_of_frame;
  wire snap_hdl_pfb_ten_gbe_rx_overrun;
  wire snap_hdl_pfb_ten_gbe_rx_overrun_ack;
  wire [31:0] snap_hdl_pfb_ten_gbe_rx_source_ip;
  wire [15:0] snap_hdl_pfb_ten_gbe_rx_source_port;
  wire snap_hdl_pfb_ten_gbe_rx_valid;
  wire snap_hdl_pfb_ten_gbe_tx_afull;
  wire [63:0] snap_hdl_pfb_ten_gbe_tx_data;
  wire [31:0] snap_hdl_pfb_ten_gbe_tx_dest_ip;
  wire [15:0] snap_hdl_pfb_ten_gbe_tx_dest_port;
  wire snap_hdl_pfb_ten_gbe_tx_end_of_frame;
  wire snap_hdl_pfb_ten_gbe_tx_overflow;
  wire snap_hdl_pfb_ten_gbe_tx_valid;
  wire tx_disable1_int;
  wire tx_fault1;
  wire txclk322_1;
  wire txuserrdy_out0;
  wire txusrclk2_out0;
  wire txusrclk_out0;
  wire [7:0] xaui_status1;
  wire xgmii_rx_clk0;
  wire [7:0] xgmii_rxc1;
  wire [63:0] xgmii_rxd1;
  wire [7:0] xgmii_txc1;
  wire [63:0] xgmii_txd1;
  // usermodule: snap_hdl_pfb_ip
  (* keep = "true" *) wire wb_clk_i;
  wire wbm_err_i;
  wire [22:0] wbs_ack_i;
  wire [31:0] wbs_adr_o;
  wire [22:0] wbs_cyc_o;
  wire [735:0] wbs_dat_i;
  wire [31:0] wbs_dat_o;
  wire [22:0] wbs_err_i;
  wire [3:0] wbs_sel_o;
  wire [22:0] wbs_stb_o;
  wire wbs_we_o;
  // xsg: SNAP
  (* keep = "true" *) wire sys_clk;
  (* keep = "true" *) wire user_clk;
  (* keep = "true" *) wire user_clk180;
  (* keep = "true" *) wire user_clk270;
  (* keep = "true" *) wire user_clk90;

/*
  _____           _                            
 |_   _|         | |                           
   | |  _ __  ___| |_ __ _ _ __   ___ ___  ___ 
   | | | '_ \/ __| __/ _` | '_ \ / __/ _ \/ __|
  _| |_| | | \__ \ || (_| | | | | (_|  __/\__ \ 
 |_____|_| |_|___/\__\__,_|_| |_|\___\___||___/
*/
  // bram: adc_snap/bram
  wb_bram #(
    .LOG_USER_WIDTH(6),
    .N_REGISTERS(0),
    .USER_ADDR_BITS(10)
  ) snap_hdl_pfb_adc_snap_bram (
    .user_addr(snap_hdl_pfb_adc_snap_bram_addr),
    .user_clk(user_clk),
    .user_din(snap_hdl_pfb_adc_snap_bram_data_in),
    .user_dout(snap_hdl_pfb_adc_snap_bram_data_out),
    .user_we(snap_hdl_pfb_adc_snap_bram_we),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0+1)*32-1:(SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_ADC_SNAP_BRAM_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // bram: pwr_snapshot/ss0/bram
  wb_bram #(
    .LOG_USER_WIDTH(6),
    .N_REGISTERS(0),
    .USER_ADDR_BITS(8)
  ) snap_hdl_pfb_pwr_snapshot_ss0_bram (
    .user_addr(snap_hdl_pfb_pwr_snapshot_ss0_bram_addr),
    .user_clk(user_clk),
    .user_din(snap_hdl_pfb_pwr_snapshot_ss0_bram_data_in),
    .user_dout(snap_hdl_pfb_pwr_snapshot_ss0_bram_data_out),
    .user_we(snap_hdl_pfb_pwr_snapshot_ss0_bram_we),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0+1)*32-1:(SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_BRAM_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // bram: pwr_snapshot/ss1/bram
  wb_bram #(
    .LOG_USER_WIDTH(6),
    .N_REGISTERS(0),
    .USER_ADDR_BITS(8)
  ) snap_hdl_pfb_pwr_snapshot_ss1_bram (
    .user_addr(snap_hdl_pfb_pwr_snapshot_ss1_bram_addr),
    .user_clk(user_clk),
    .user_din(snap_hdl_pfb_pwr_snapshot_ss1_bram_data_in),
    .user_dout(snap_hdl_pfb_pwr_snapshot_ss1_bram_data_out),
    .user_we(snap_hdl_pfb_pwr_snapshot_ss1_bram_we),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0+1)*32-1:(SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_BRAM_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // gpio: led
  gpio_simulink2ext #(
    .CLK_PHASE(0),
    .DDR(0),
    .REG_IOB("true"),
    .USE_DELAY(0),
    .WIDTH(1)
  ) snap_hdl_pfb_led (
    .clk(user_clk),
    .clk90(user_clk90),
    .gateway(snap_hdl_pfb_led_gateway),
    .io_pad(gpio_led_0_0_ext)
  );

  // lmx2581: lmx2581_from
  // LMX2581 synthesizer controller
  lmx2581_controller  lmx2581_controller_inst (
    .lmx_be(lmx_be),
    .lmx_ce(lmx_ce),
    .lmx_clk(lmx_clk),
    .lmx_data(lmx_data),
    .lmx_le(lmx_le),
    .lmx_muxout(lmx_muxout),
    .wb_ack_o(wbs_ack_i[LMX2581_CONTROLLER_INST_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[LMX2581_CONTROLLER_INST_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(LMX2581_CONTROLLER_INST_WBID0+1)*32-1:(LMX2581_CONTROLLER_INST_WBID0)*32]),
    .wb_err_o(wbs_err_i[LMX2581_CONTROLLER_INST_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[LMX2581_CONTROLLER_INST_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // microblaze: microblaze0
  // microblaze0: Microblaze Control and Monitoring subsystem
  snap_bd  snap_bd_inst (
    .ACK_I(wbm_ack_i),
    .ADR_O(wbm_adr_o),
    .CYC_O(wbm_cyc_o),
    .Clk(wb_clk_i),
    .DAT_I(wbm_dat_i),
    .DAT_O(wbm_dat_o),
    .RST_O(wbm_rst_o),
    .Reset(wb_rst_i),
    .SEL_O(wbm_sel_o),
    .STB_O(wbm_stb_o),
    .UART_rxd(UART_rxd),
    .UART_txd(UART_txd),
    .WE_O(wbm_we_o),
    .dcm_locked(1'b1),
    .ext_intr(mb_intr),
    .spi_rtl_io0_i(spi_rtl_io0_i),
    .spi_rtl_io0_o(spi_rtl_io0_o),
    .spi_rtl_io0_t(spi_rtl_io0_t),
    .spi_rtl_io1_i(spi_rtl_io1_i),
    .spi_rtl_io1_o(spi_rtl_io1_o),
    .spi_rtl_io1_t(spi_rtl_io1_t),
    .spi_rtl_io2_i(spi_rtl_io2_i),
    .spi_rtl_io2_o(spi_rtl_io2_o),
    .spi_rtl_io2_t(spi_rtl_io2_t),
    .spi_rtl_io3_i(spi_rtl_io3_i),
    .spi_rtl_io3_o(spi_rtl_io3_o),
    .spi_rtl_io3_t(spi_rtl_io3_t),
    .spi_rtl_ss_i(spi_rtl_ss_i),
    .spi_rtl_ss_o(spi_rtl_ss_o),
    .spi_rtl_ss_t(spi_rtl_ss_t)
  );


  snap_hdl_pfb_ip  snap_hdl_pfb_ip_inst (
    .clk(user_clk),
    .snap_hdl_pfb_adc_snap_bram_addr(snap_hdl_pfb_adc_snap_bram_addr),
    .snap_hdl_pfb_adc_snap_bram_data_in(snap_hdl_pfb_adc_snap_bram_data_in),
    .snap_hdl_pfb_adc_snap_bram_data_out(snap_hdl_pfb_adc_snap_bram_data_out),
    .snap_hdl_pfb_adc_snap_bram_we(snap_hdl_pfb_adc_snap_bram_we),
    .snap_hdl_pfb_adc_snap_ctrl_user_data_out(snap_hdl_pfb_adc_snap_ctrl_user_data_out),
    .snap_hdl_pfb_adc_snap_status_user_data_in(snap_hdl_pfb_adc_snap_status_user_data_in),
    .snap_hdl_pfb_adc_trig_user_data_out(snap_hdl_pfb_adc_trig_user_data_out),
    .snap_hdl_pfb_led_ctrl_user_data_out(snap_hdl_pfb_led_ctrl_user_data_out),
    .snap_hdl_pfb_led_gateway(snap_hdl_pfb_led_gateway),
    .snap_hdl_pfb_pfb_status_user_data_in(snap_hdl_pfb_pfb_status_user_data_in),
    .snap_hdl_pfb_pwr_snapshot_ss0_bram_addr(snap_hdl_pfb_pwr_snapshot_ss0_bram_addr),
    .snap_hdl_pfb_pwr_snapshot_ss0_bram_data_in(snap_hdl_pfb_pwr_snapshot_ss0_bram_data_in),
    .snap_hdl_pfb_pwr_snapshot_ss0_bram_data_out(snap_hdl_pfb_pwr_snapshot_ss0_bram_data_out),
    .snap_hdl_pfb_pwr_snapshot_ss0_bram_we(snap_hdl_pfb_pwr_snapshot_ss0_bram_we),
    .snap_hdl_pfb_pwr_snapshot_ss0_ctrl_user_data_out(snap_hdl_pfb_pwr_snapshot_ss0_ctrl_user_data_out),
    .snap_hdl_pfb_pwr_snapshot_ss0_status_user_data_in(snap_hdl_pfb_pwr_snapshot_ss0_status_user_data_in),
    .snap_hdl_pfb_pwr_snapshot_ss1_bram_addr(snap_hdl_pfb_pwr_snapshot_ss1_bram_addr),
    .snap_hdl_pfb_pwr_snapshot_ss1_bram_data_in(snap_hdl_pfb_pwr_snapshot_ss1_bram_data_in),
    .snap_hdl_pfb_pwr_snapshot_ss1_bram_data_out(snap_hdl_pfb_pwr_snapshot_ss1_bram_data_out),
    .snap_hdl_pfb_pwr_snapshot_ss1_bram_we(snap_hdl_pfb_pwr_snapshot_ss1_bram_we),
    .snap_hdl_pfb_pwr_snapshot_ss1_ctrl_user_data_out(snap_hdl_pfb_pwr_snapshot_ss1_ctrl_user_data_out),
    .snap_hdl_pfb_pwr_snapshot_ss1_status_user_data_in(snap_hdl_pfb_pwr_snapshot_ss1_status_user_data_in),
    .snap_hdl_pfb_shiftreg_user_data_out(snap_hdl_pfb_shiftreg_user_data_out),
    .snap_hdl_pfb_snap_adc_a1(snap_hdl_pfb_snap_adc_a1),
    .snap_hdl_pfb_snap_adc_a2(snap_hdl_pfb_snap_adc_a2),
    .snap_hdl_pfb_snap_adc_a3(snap_hdl_pfb_snap_adc_a3),
    .snap_hdl_pfb_snap_adc_a4(snap_hdl_pfb_snap_adc_a4),
    .snap_hdl_pfb_snap_adc_b1(snap_hdl_pfb_snap_adc_b1),
    .snap_hdl_pfb_snap_adc_b2(snap_hdl_pfb_snap_adc_b2),
    .snap_hdl_pfb_snap_adc_b3(snap_hdl_pfb_snap_adc_b3),
    .snap_hdl_pfb_snap_adc_b4(snap_hdl_pfb_snap_adc_b4),
    .snap_hdl_pfb_snap_adc_c1(snap_hdl_pfb_snap_adc_c1),
    .snap_hdl_pfb_snap_adc_c2(snap_hdl_pfb_snap_adc_c2),
    .snap_hdl_pfb_snap_adc_c3(snap_hdl_pfb_snap_adc_c3),
    .snap_hdl_pfb_snap_adc_c4(snap_hdl_pfb_snap_adc_c4),
    .snap_hdl_pfb_sw_trig_user_data_out(snap_hdl_pfb_sw_trig_user_data_out),
    .snap_hdl_pfb_sys_ctl_user_data_out(snap_hdl_pfb_sys_ctl_user_data_out),
    .snap_hdl_pfb_ten_gbe_led_rx(snap_hdl_pfb_ten_gbe_led_rx),
    .snap_hdl_pfb_ten_gbe_led_tx(snap_hdl_pfb_ten_gbe_led_tx),
    .snap_hdl_pfb_ten_gbe_led_up(snap_hdl_pfb_ten_gbe_led_up),
    .snap_hdl_pfb_ten_gbe_rst(snap_hdl_pfb_ten_gbe_rst),
    .snap_hdl_pfb_ten_gbe_rx_ack(snap_hdl_pfb_ten_gbe_rx_ack),
    .snap_hdl_pfb_ten_gbe_rx_bad_frame(snap_hdl_pfb_ten_gbe_rx_bad_frame),
    .snap_hdl_pfb_ten_gbe_rx_data(snap_hdl_pfb_ten_gbe_rx_data),
    .snap_hdl_pfb_ten_gbe_rx_end_of_frame(snap_hdl_pfb_ten_gbe_rx_end_of_frame),
    .snap_hdl_pfb_ten_gbe_rx_overrun(snap_hdl_pfb_ten_gbe_rx_overrun),
    .snap_hdl_pfb_ten_gbe_rx_overrun_ack(snap_hdl_pfb_ten_gbe_rx_overrun_ack),
    .snap_hdl_pfb_ten_gbe_rx_source_ip(snap_hdl_pfb_ten_gbe_rx_source_ip),
    .snap_hdl_pfb_ten_gbe_rx_source_port(snap_hdl_pfb_ten_gbe_rx_source_port),
    .snap_hdl_pfb_ten_gbe_rx_valid(snap_hdl_pfb_ten_gbe_rx_valid),
    .snap_hdl_pfb_ten_gbe_tx_afull(snap_hdl_pfb_ten_gbe_tx_afull),
    .snap_hdl_pfb_ten_gbe_tx_data(snap_hdl_pfb_ten_gbe_tx_data),
    .snap_hdl_pfb_ten_gbe_tx_dest_ip(snap_hdl_pfb_ten_gbe_tx_dest_ip),
    .snap_hdl_pfb_ten_gbe_tx_dest_port(snap_hdl_pfb_ten_gbe_tx_dest_port),
    .snap_hdl_pfb_ten_gbe_tx_end_of_frame(snap_hdl_pfb_ten_gbe_tx_end_of_frame),
    .snap_hdl_pfb_ten_gbe_tx_overflow(snap_hdl_pfb_ten_gbe_tx_overflow),
    .snap_hdl_pfb_ten_gbe_tx_valid(snap_hdl_pfb_ten_gbe_tx_valid)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io0_inst (
    .I(spi_rtl_io0_o),
    .IO(spi_rtl_io0),
    .O(spi_rtl_io0_i),
    .T(spi_rtl_io0_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io1_inst (
    .I(spi_rtl_io1_o),
    .IO(spi_rtl_io1),
    .O(spi_rtl_io1_i),
    .T(spi_rtl_io1_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io2_inst (
    .I(spi_rtl_io2_o),
    .IO(spi_rtl_io2),
    .O(spi_rtl_io2_i),
    .T(spi_rtl_io2_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io3_inst (
    .I(spi_rtl_io3_o),
    .IO(spi_rtl_io3),
    .O(spi_rtl_io3_i),
    .T(spi_rtl_io3_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_ss_inst (
    .I(spi_rtl_ss_o),
    .IO(spi_rtl_ss),
    .O(spi_rtl_ss_i),
    .T(spi_rtl_ss_t)
  );

  // snap: SNAP
  snap_infrastructure  snap_infrastructure_inst (
    .clk_200(clk_200),
    .idelay_rdy(idelay_rdy),
    .sys_clk0(sys_clk),
    .sys_clk180(sys_clk180),
    .sys_clk270(sys_clk270),
    .sys_clk_buf_n(sys_clk_n),
    .sys_clk_buf_p(sys_clk_p),
    .sys_rst(sys_rst)
  );

  // snap_adc: snap_adc
  // Embedded ADC16 bram
  wb_bram #(
    .LOG_USER_WIDTH(5),
    .N_REGISTERS(2),
    .USER_ADDR_BITS(10)
  ) adc16_wb_ram0 (
    .user_addr(adc16_snap_addr),
    .user_clk(adc0_clk),
    .user_din({snap_hdl_pfb_snap_adc_a1,snap_hdl_pfb_snap_adc_a2,snap_hdl_pfb_snap_adc_a3,snap_hdl_pfb_snap_adc_a4}),
    .user_dout(),
    .user_we(adc16_snap_we),
    .wb_ack_o(wbs_ack_i[ADC16_WB_RAM0_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[ADC16_WB_RAM0_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(ADC16_WB_RAM0_WBID0+1)*32-1:(ADC16_WB_RAM0_WBID0)*32]),
    .wb_err_o(wbs_err_i[ADC16_WB_RAM0_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[ADC16_WB_RAM0_WBID0]),
    .wb_we_i(wbs_we_o)
  );


  // Embedded ADC16 bram
  wb_bram #(
    .LOG_USER_WIDTH(5),
    .N_REGISTERS(2),
    .USER_ADDR_BITS(10)
  ) adc16_wb_ram1 (
    .user_addr(adc16_snap_addr),
    .user_clk(adc0_clk),
    .user_din({snap_hdl_pfb_snap_adc_b1,snap_hdl_pfb_snap_adc_b2,snap_hdl_pfb_snap_adc_b3,snap_hdl_pfb_snap_adc_b4}),
    .user_dout(),
    .user_we(adc16_snap_we),
    .wb_ack_o(wbs_ack_i[ADC16_WB_RAM1_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[ADC16_WB_RAM1_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(ADC16_WB_RAM1_WBID0+1)*32-1:(ADC16_WB_RAM1_WBID0)*32]),
    .wb_err_o(wbs_err_i[ADC16_WB_RAM1_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[ADC16_WB_RAM1_WBID0]),
    .wb_we_i(wbs_we_o)
  );


  // Embedded ADC16 bram
  wb_bram #(
    .LOG_USER_WIDTH(5),
    .N_REGISTERS(2),
    .USER_ADDR_BITS(10)
  ) adc16_wb_ram2 (
    .user_addr(adc16_snap_addr),
    .user_clk(adc0_clk),
    .user_din({snap_hdl_pfb_snap_adc_c1,snap_hdl_pfb_snap_adc_c2,snap_hdl_pfb_snap_adc_c3,snap_hdl_pfb_snap_adc_c4}),
    .user_dout(),
    .user_we(adc16_snap_we),
    .wb_ack_o(wbs_ack_i[ADC16_WB_RAM2_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[ADC16_WB_RAM2_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(ADC16_WB_RAM2_WBID0+1)*32-1:(ADC16_WB_RAM2_WBID0)*32]),
    .wb_err_o(wbs_err_i[ADC16_WB_RAM2_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[ADC16_WB_RAM2_WBID0]),
    .wb_we_i(wbs_we_o)
  );


  adc16_interface #(
    .ADC_DATA_WIDTH(8),
    .ADC_RESOLUTION(8),
    .G_NUM_CLOCKS(1),
    .G_NUM_UNITS(3),
    .G_ZDOK_REV(2)
  ) snap_hdl_pfb_snap_adc (
    .a1(snap_hdl_pfb_snap_adc_a1),
    .a2(snap_hdl_pfb_snap_adc_a2),
    .a3(snap_hdl_pfb_snap_adc_a3),
    .a4(snap_hdl_pfb_snap_adc_a4),
    .b1(snap_hdl_pfb_snap_adc_b1),
    .b2(snap_hdl_pfb_snap_adc_b2),
    .b3(snap_hdl_pfb_snap_adc_b3),
    .b4(snap_hdl_pfb_snap_adc_b4),
    .c1(snap_hdl_pfb_snap_adc_c1),
    .c2(snap_hdl_pfb_snap_adc_c2),
    .c3(snap_hdl_pfb_snap_adc_c3),
    .c4(snap_hdl_pfb_snap_adc_c4),
    .clk_frame_n(0),
    .clk_frame_p(0),
    .clk_line_n(adc16_clk_line_n),
    .clk_line_p(adc16_clk_line_p),
    .delay_rst(adc16_delay_rst),
    .delay_tap(adc16_delay_tap),
    .demux_mode(adc16_demux_mode),
    .fabric_clk(adc0_clk),
    .fabric_clk_180(adc0_clk180),
    .fabric_clk_270(adc0_clk270),
    .fabric_clk_90(adc0_clk90),
    .iserdes_bitslip(adc16_iserdes_bitslip),
    .locked(adc16_locked),
    .reset(adc16_reset),
    .ser_a_n(adc16_ser_a_n),
    .ser_a_p(adc16_ser_a_p),
    .ser_b_n(adc16_ser_b_n),
    .ser_b_p(adc16_ser_b_p),
    .snap_addr(adc16_snap_addr),
    .snap_req(adc16_snap_req),
    .snap_we(adc16_snap_we)
  );


  wb_adc16_controller #(
    .G_NUM_SCLK_LINES(3),
    .G_NUM_SDATA_LINES(3),
    .G_NUM_UNITS(3),
    .G_ROACH2_REV(0),
    .G_ZDOK_REV(2)
  ) wb_adc16_controller (
    .adc0_adc3wire_csn1(adc0_adc3wire_csn1),
    .adc0_adc3wire_csn2(adc0_adc3wire_csn2),
    .adc0_adc3wire_csn3(adc0_adc3wire_csn3),
    .adc0_adc3wire_csn4(),
    .adc0_adc3wire_sclk(adc0_adc3wire_sclk),
    .adc0_adc3wire_sdata(adc0_adc3wire_sdata),
    .adc16_delay_rst(adc16_delay_rst),
    .adc16_delay_tap(adc16_delay_tap),
    .adc16_demux_mode(adc16_demux_mode),
    .adc16_iserdes_bitslip(adc16_iserdes_bitslip),
    .adc16_locked(adc16_locked),
    .adc16_reset(adc16_reset),
    .adc16_snap_req(adc16_snap_req),
    .adc1_adc3wire_csn1(),
    .adc1_adc3wire_csn2(),
    .adc1_adc3wire_csn3(),
    .adc1_adc3wire_csn4(),
    .adc1_adc3wire_sclk(),
    .adc1_adc3wire_sdata(),
    .wb_ack_o(wbs_ack_i[WB_ADC16_CONTROLLER_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[WB_ADC16_CONTROLLER_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(WB_ADC16_CONTROLLER_WBID0+1)*32-1:(WB_ADC16_CONTROLLER_WBID0)*32]),
    .wb_err_o(wbs_err_i[WB_ADC16_CONTROLLER_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[WB_ADC16_CONTROLLER_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: adc_snap/ctrl
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_adc_snap_ctrl (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_adc_snap_ctrl_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0+1)*32-1:(SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_ADC_SNAP_CTRL_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: adc_snap/status
  wb_register_simulink2ppc  snap_hdl_pfb_adc_snap_status (
    .user_clk(user_clk),
    .user_data_in(snap_hdl_pfb_adc_snap_status_user_data_in),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0+1)*32-1:(SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_ADC_SNAP_STATUS_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: adc_trig
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_adc_trig (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_adc_trig_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_ADC_TRIG_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_ADC_TRIG_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_ADC_TRIG_WBID0+1)*32-1:(SNAP_HDL_PFB_ADC_TRIG_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_ADC_TRIG_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_ADC_TRIG_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: led_ctrl
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_led_ctrl (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_led_ctrl_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_LED_CTRL_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_LED_CTRL_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_LED_CTRL_WBID0+1)*32-1:(SNAP_HDL_PFB_LED_CTRL_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_LED_CTRL_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_LED_CTRL_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: pfb_status
  wb_register_simulink2ppc  snap_hdl_pfb_pfb_status (
    .user_clk(user_clk),
    .user_data_in(snap_hdl_pfb_pfb_status_user_data_in),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PFB_STATUS_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PFB_STATUS_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PFB_STATUS_WBID0+1)*32-1:(SNAP_HDL_PFB_PFB_STATUS_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PFB_STATUS_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PFB_STATUS_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: pwr_snapshot/ss0/ctrl
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_pwr_snapshot_ss0_ctrl (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_pwr_snapshot_ss0_ctrl_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0+1)*32-1:(SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_CTRL_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: pwr_snapshot/ss0/status
  wb_register_simulink2ppc  snap_hdl_pfb_pwr_snapshot_ss0_status (
    .user_clk(user_clk),
    .user_data_in(snap_hdl_pfb_pwr_snapshot_ss0_status_user_data_in),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0+1)*32-1:(SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS0_STATUS_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: pwr_snapshot/ss1/ctrl
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_pwr_snapshot_ss1_ctrl (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_pwr_snapshot_ss1_ctrl_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0+1)*32-1:(SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_CTRL_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: pwr_snapshot/ss1/status
  wb_register_simulink2ppc  snap_hdl_pfb_pwr_snapshot_ss1_status (
    .user_clk(user_clk),
    .user_data_in(snap_hdl_pfb_pwr_snapshot_ss1_status_user_data_in),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0+1)*32-1:(SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_PWR_SNAPSHOT_SS1_STATUS_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: shiftreg
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_shiftreg (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_shiftreg_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_SHIFTREG_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_SHIFTREG_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_SHIFTREG_WBID0+1)*32-1:(SNAP_HDL_PFB_SHIFTREG_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_SHIFTREG_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_SHIFTREG_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: sw_trig
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_sw_trig (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_sw_trig_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_SW_TRIG_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_SW_TRIG_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_SW_TRIG_WBID0+1)*32-1:(SNAP_HDL_PFB_SW_TRIG_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_SW_TRIG_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_SW_TRIG_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg: sys_ctl
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) snap_hdl_pfb_sys_ctl (
    .user_clk(user_clk),
    .user_data_out(snap_hdl_pfb_sys_ctl_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_SYS_CTL_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_SYS_CTL_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_SYS_CTL_WBID0+1)*32-1:(SNAP_HDL_PFB_SYS_CTL_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_SYS_CTL_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_SYS_CTL_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sw_reg_sync: adc16_use_synth
  wb_register_ppc2simulink_sync  snap_adc_adc16_use_synth (
    .user_data_out(snap_adc_adc16_use_synth_user_data_out),
    .wb_ack_o(wbs_ack_i[SNAP_ADC_ADC16_USE_SYNTH_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_ADC_ADC16_USE_SYNTH_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_ADC_ADC16_USE_SYNTH_WBID0+1)*32-1:(SNAP_ADC_ADC16_USE_SYNTH_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_ADC_ADC16_USE_SYNTH_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_ADC_ADC16_USE_SYNTH_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // sys_block: sys_block0
  sys_block #(
    .BOARD_ID(12),
    .REV_MAJ(12),
    .REV_MIN(0),
    .REV_RCS(32)
  ) sys_block_inst (
    .user_clk(user_clk),
    .wb_ack_o(wbs_ack_i[SYS_BLOCK_INST_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SYS_BLOCK_INST_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SYS_BLOCK_INST_WBID0+1)*32-1:(SYS_BLOCK_INST_WBID0)*32]),
    .wb_err_o(wbs_err_i[SYS_BLOCK_INST_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SYS_BLOCK_INST_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // ten_gbe: ten_gbe
  kat_ten_gb_eth #(
    .CPU_RX_ENABLE(1),
    .CPU_TX_ENABLE(1),
    .FABRIC_ENABLE(0),
    .FABRIC_GATEWAY(8'h1),
    .FABRIC_IP(32'hc0a80514),
    .FABRIC_MAC(48'h123456780000),
    .FABRIC_PORT(10000),
    .LARGE_PACKETS(1),
    .RX_DIST_RAM(0),
    .TTL(255)
  ) snap_hdl_pfb_ten_gbe (
    .clk(user_clk),
    .led_rx(snap_hdl_pfb_ten_gbe_led_rx),
    .led_tx(snap_hdl_pfb_ten_gbe_led_tx),
    .led_up(snap_hdl_pfb_ten_gbe_led_up),
    .mgt_rxeqmix(mgt_rxeqmix1),
    .mgt_txdiffctrl(mgt_txdiffctrl1),
    .mgt_txpostemphasis(mgt_txpostemphasis1),
    .mgt_txpreemphasis(mgt_txpreemphasis1),
    .rst(snap_hdl_pfb_ten_gbe_rst),
    .rx_ack(snap_hdl_pfb_ten_gbe_rx_ack),
    .rx_bad_frame(snap_hdl_pfb_ten_gbe_rx_bad_frame),
    .rx_data(snap_hdl_pfb_ten_gbe_rx_data),
    .rx_end_of_frame(snap_hdl_pfb_ten_gbe_rx_end_of_frame),
    .rx_overrun(snap_hdl_pfb_ten_gbe_rx_overrun),
    .rx_overrun_ack(snap_hdl_pfb_ten_gbe_rx_overrun_ack),
    .rx_source_ip(snap_hdl_pfb_ten_gbe_rx_source_ip),
    .rx_source_port(snap_hdl_pfb_ten_gbe_rx_source_port),
    .rx_valid(snap_hdl_pfb_ten_gbe_rx_valid),
    .tx_afull(snap_hdl_pfb_ten_gbe_tx_afull),
    .tx_data(snap_hdl_pfb_ten_gbe_tx_data),
    .tx_dest_ip(snap_hdl_pfb_ten_gbe_tx_dest_ip),
    .tx_dest_port(snap_hdl_pfb_ten_gbe_tx_dest_port),
    .tx_end_of_frame(snap_hdl_pfb_ten_gbe_tx_end_of_frame),
    .tx_overflow(snap_hdl_pfb_ten_gbe_tx_overflow),
    .tx_valid(snap_hdl_pfb_ten_gbe_tx_valid),
    .wb_ack_o(wbs_ack_i[SNAP_HDL_PFB_TEN_GBE_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SNAP_HDL_PFB_TEN_GBE_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SNAP_HDL_PFB_TEN_GBE_WBID0+1)*32-1:(SNAP_HDL_PFB_TEN_GBE_WBID0)*32]),
    .wb_err_o(wbs_err_i[SNAP_HDL_PFB_TEN_GBE_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SNAP_HDL_PFB_TEN_GBE_WBID0]),
    .wb_we_i(wbs_we_o),
    .xaui_clk(core_clk_156_0),
    .xaui_reset(sys_rst),
    .xaui_status(xaui_status1),
    .xgmii_rxc(xgmii_rxc1),
    .xgmii_rxd(xgmii_rxd1),
    .xgmii_txc(xgmii_txc1),
    .xgmii_txd(xgmii_txd1)
  );


  tengbaser_infrastructure  tengbaser_infra0_inst (
    .areset_clk156_out(areset_clk156_out0),
    .core_clk156_out(core_clk_156_0),
    .dclk(dclk0),
    .gtrxreset_out(gtrxreset_out0),
    .gttxreset_out(gttxreset_out0),
    .qplllock_out(qplllock_out0),
    .qplloutclk_out(qplloutclk_out0),
    .qplloutrefclk_out(qplloutrefclk_out0),
    .refclk_n(ref_clk_n0),
    .refclk_p(ref_clk_p0),
    .reset(sys_rst),
    .reset_counter_done_out(reset_counter_done_out0),
    .txclk322(txclk322_1),
    .txuserrdy_out(txuserrdy_out0),
    .txusrclk2_out(txusrclk2_out0),
    .txusrclk_out(txusrclk_out0),
    .xgmii_rx_clk(xgmii_rx_clk0)
  );


  tengbaser_phy  tengbaser_phy1 (
    .areset(sys_rst),
    .areset_clk156(areset_clk156_out0),
    .clk156(core_clk_156_0),
    .configuration_vector(536'b0),
    .core_status(xaui_status1),
    .dclk(dclk0),
    .gtrxreset(gtrxreset_out0),
    .gttxreset(gttxreset_out0),
    .pma_pmd_type(3'b111),
    .qplllock(qplllock_out0),
    .qplloutclk(qplloutclk_out0),
    .qplloutrefclk(qplloutrefclk_out0),
    .reset_counter_done(reset_counter_done_out0),
    .resetdone(resetdone1),
    .rxn(mgt_rx_n1),
    .rxp(mgt_rx_p1),
    .signal_detect(signal_detect1),
    .status_vector(),
    .tx_disable(tx_disable1_int),
    .tx_fault(tx_fault1),
    .txclk322(txclk322_1),
    .txn(mgt_tx_n1),
    .txp(mgt_tx_p1),
    .txuserrdy(txuserrdy_out0),
    .txusrclk(txusrclk_out0),
    .txusrclk2(txusrclk2_out0),
    .xgmii_rxc(xgmii_rxc1),
    .xgmii_rxd(xgmii_rxd1),
    .xgmii_txc(xgmii_txc1),
    .xgmii_txd(xgmii_txd1)
  );

  // usermodule: snap_hdl_pfb_ip
  wbs_arbiter #(
    .N_SLAVES(N_WB_SLAVES),
    .SLAVE_ADDR(SLAVE_ADDR),
    .SLAVE_HIGH(SLAVE_HIGH),
    .TIMEOUT(1024)
  ) wbs_arbiter_inst (
    .wb_clk_i(wb_clk_i),
    .wb_rst_i(wb_rst_i),
    .wbm_ack_o(wbm_ack_i),
    .wbm_adr_i(wbm_adr_o),
    .wbm_cyc_i(wbm_cyc_o),
    .wbm_dat_i(wbm_dat_o),
    .wbm_dat_o(wbm_dat_i),
    .wbm_err_o(wbm_err_i),
    .wbm_sel_i(wbm_sel_o),
    .wbm_stb_i(wbm_stb_o),
    .wbm_we_i(wbm_we_o),
    .wbs_ack_i(wbs_ack_i),
    .wbs_adr_o(wbs_adr_o),
    .wbs_cyc_o(wbs_cyc_o),
    .wbs_dat_i(wbs_dat_i),
    .wbs_dat_o(wbs_dat_o),
    .wbs_err_i(wbs_err_i),
    .wbs_sel_o(wbs_sel_o),
    .wbs_stb_o(wbs_stb_o),
    .wbs_we_o(wbs_we_o)
  );


/*
                   _                                  _       
     /\           (_)                                | |      
    /  \   ___ ___ _  __ _ _ __  _ __ ___   ___ _ __ | |_ ___ 
   / /\ \ / __/ __| |/ _` | '_ \| '_ ` _ \ / _ \ '_ \| __/ __|
  / ____ \\__ \__ \ | (_| | | | | | | | | |  __/ | | | |_\__ \ 
 /_/    \_\___/___/_|\__, |_| |_|_| |_| |_|\___|_| |_|\__|___/
                      __/ |                                   
                     |___/                                    
*/
  // microblaze: microblaze0
  assign mb_intr = |mb_intr_v;
  assign wb_clk_i = sys_clk;
  assign wb_rst_i = sys_rst;
  // snap: SNAP
  assign sys_clk90 = ~sys_clk270;
  // snap_adc: snap_adc
  assign adc_pd = 3'b000;
  assign adc_rst_n = 3'b111;
  assign clk_sel_a[0] = snap_adc_adc16_use_synth_user_data_out[0];
  assign clk_sel_b[0] = ~snap_adc_adc16_use_synth_user_data_out[0];
  // ten_gbe: ten_gbe
  assign signal_detect1 = 1'b1;
  assign tx_disable1 = ~tx_disable1_int;
  assign tx_fault1 = 1'b0;
  // xsg: SNAP
  assign user_clk = adc0_clk;
  assign user_clk180 = adc0_clk180;
  assign user_clk270 = adc0_clk270;
  assign user_clk90 = adc0_clk90;


endmodule